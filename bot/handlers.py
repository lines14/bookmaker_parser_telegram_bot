from aiogram import types, Dispatcher
from bot.bot_base import bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot.buttons import main_menu_keyboard
import typing
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import exceptions

# –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞

# –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞

class Generator(StatesGroup):
    appeal_mobilization1 = State()
    appeal_mobilization2 = State()

# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# –î–∏–∞–ª–æ–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def start_command(message: types.Message):
    fullname = message.from_user.full_name
    await bot.send_message(chat_id = message.from_user.id, text=f'{fullname}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä—ã', reply_markup=intro_inline_keyboard)

async def start_inline_keyboard_callback_redirect(callback: types.CallbackQuery):
    await bot.send_message(chat_id = callback.from_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=main_menu_keyboard)
    await bot.answer_callback_query(callback.id)

async def restart_command(message: types.Message):
    # await bot.delete_message(chat_id = message.from_user.id, message_id=message.message_id)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=main_menu_keyboard)

async def restart_command_inline(callback: types.CallbackQuery):
    # await bot.delete_message(chat_id = message.from_user.id, message_id=message.message_id)
    await bot.send_message(chat_id = callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=main_menu_keyboard)
    await bot.answer_callback_query(callback.id)

async def restart_command_for_all_FSM(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:', reply_markup=main_menu_keyboard)

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ —Å–±–æ—Ä—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

async def start_inline_keyboard_callback_pick(callback: types.CallbackQuery):
    global reminder_state
    global aioschedule_task
    global reminder_id
    reminder_id = callback.from_user.id
    if reminder_state == 0:
        aioschedule_task = asyncio.create_task(scheduler())
        reminder_state = 1
    await bot.send_message(chat_id = callback.from_user.id, text='–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=consultation_inline_keyboard)
    await bot.answer_callback_query(callback.id)

async def restart_inline_keyboard_callback_pick_without_delete_markup(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await bot.send_message(chat_id = callback.from_user.id, text='–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=consultation_inline_keyboard)
    await bot.answer_callback_query(callback.id)

async def restart_inline_keyboard_callback_pick_delete_markup(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    msg = await bot.send_message(chat_id = callback.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(chat_id = callback.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
    await bot.send_message(chat_id = callback.from_user.id, text='–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=consultation_inline_keyboard)
    await bot.answer_callback_query(callback.id)

async def recomendations_after_inline(callback: types.CallbackQuery):
    await bot.send_message(chat_id = callback.from_user.id, text='–í—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã —É–¥–æ–±–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ —Ö—ç—à—Ç–µ–≥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∑–∞—Ö–æ–¥–∏—Ç–µ!')
    await bot.send_message(chat_id = callback.from_user.id, text='https://t.me/bettercallpavlukov/1087', reply_markup=consultation_keyboard_in_after_inline_recomendations)
    await bot.answer_callback_query(callback.id)

# –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è

async def start_inline_keyboard_callback_mobilization(callback: types.CallbackQuery):
    await InlineAppealMobilization.inline_appeal_mobilization1.set()
    await bot.send_message(chat_id = callback.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_inline_keyboard_missclick)
    await bot.answer_callback_query(callback.id)

async def start_inline_keyboard_callback_mobilization_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await InlineAppealMobilization.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

async def start_inline_keyboard_callback_mobilization_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_mobilization)
        else:
            await InlineAppealMobilization.inline_appeal_mobilization2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_mobilization)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await InlineAppealMobilization.inline_appeal_mobilization2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

# –ú–∏–≥—Ä–∞—Ü–∏—è

async def start_inline_keyboard_callback_migration(callback: types.CallbackQuery):
    await InlineAppealMigration.inline_appeal_migration1.set()
    await bot.send_message(chat_id = callback.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –º–µ–Ω—è –≤ –ø–æ–¥–∞—Ä–æ–∫ —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"', reply_markup=consultation_inline_keyboard_missclick)
    await bot.answer_callback_query(callback.id)

async def start_inline_keyboard_callback_migration_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ú–∏–≥—Ä–∞—Ü–∏—è'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await InlineAppealMigration.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

async def start_inline_keyboard_callback_migration_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª, —Ä–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å –≤–∞–º —Å–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã" –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\nhttps://drive.google.com/file/d/1Y2rMo_GcgpF3ck2NzU0JPbQU2of3VQpT/view')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_migration)
        else:
            await InlineAppealMigration.inline_appeal_migration2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_migration)
            await bot.send_message(chat_id = message.from_user.id, text='–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, —Ä–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å –≤–∞–º —Å–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã" –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\nhttps://drive.google.com/file/d/1Y2rMo_GcgpF3ck2NzU0JPbQU2of3VQpT/view')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await InlineAppealMigration.inline_appeal_migration2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

# –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã

async def start_inline_keyboard_callback_employment(callback: types.CallbackQuery):
    await InlineAppealEmployment.inline_appeal_employment1.set()
    await bot.send_message(chat_id = callback.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_inline_keyboard_missclick)
    await bot.answer_callback_query(callback.id)

async def start_inline_keyboard_callback_employment_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await InlineAppealEmployment.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

async def start_inline_keyboard_callback_employment_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_employment)
        else:
            await InlineAppealEmployment.inline_appeal_employment2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_employment)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await InlineAppealEmployment.inline_appeal_employment2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

# –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

async def start_inline_keyboard_callback_consumer(callback: types.CallbackQuery):
    await InlineAppealConsumer.inline_appeal_consumer1.set()
    await bot.send_message(chat_id = callback.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_inline_keyboard_missclick)
    await bot.answer_callback_query(callback.id)

async def start_inline_keyboard_callback_consumer_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await InlineAppealConsumer.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

async def start_inline_keyboard_callback_consumer_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_consumer)
        else:
            await InlineAppealConsumer.inline_appeal_consumer2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_after_inline_consumer)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await InlineAppealConsumer.inline_appeal_consumer2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

# –î—Ä—É–≥–∞—è —Ç–µ–º–∞

async def start_inline_keyboard_callback_another(callback: types.CallbackQuery):
    await InlineAppealAnother.inline_appeal_another1.set()
    await bot.send_message(chat_id = callback.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_inline_keyboard_missclick)
    await bot.answer_callback_query(callback.id)

async def start_inline_keyboard_callback_another_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await InlineAppealAnother.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

async def start_inline_keyboard_callback_another_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ç–µ–º–µ. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã:', reply_markup=consultation_keyboard_in_after_inline_another)
        else:
            await InlineAppealAnother.inline_appeal_another2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ç–µ–º–µ. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            msg = await bot.send_message(chat_id = message.from_user.id, text='„Ö§', reply_markup=ReplyKeyboardRemove())
            await bot.delete_message(chat_id = message.from_user.id, message_id=msg["message_id"]) # chat_id = message.from_user.id
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã:', reply_markup=consultation_keyboard_in_after_inline_another)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await InlineAppealAnother.inline_appeal_another2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ.', reply_markup=consultation_inline_keyboard_phone_keeper)
            await bot.send_message(chat_id = message.from_user.id, text='–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç Telegram, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É', reply_markup=consultation_inline_keyboard_missclick_markup)

# –ú–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ —Å–±–æ—Ä—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

async def consultation_start_command(message: types.Message):
    global reminder_state
    global aioschedule_task
    global reminder_id
    reminder_id = message.from_user.id
    if reminder_state == 0:
        aioschedule_task = asyncio.create_task(scheduler())
        reminder_state = 1
    await bot.send_message(chat_id = message.from_user.id, text='–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=consultation_keyboard)

async def consultation_back_for_consultation_FSM(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∏ –ø–æ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ:', reply_markup=consultation_keyboard)

async def recomendations_after(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id, text='–í—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã —É–¥–æ–±–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ —Ö—ç—à—Ç–µ–≥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∑–∞—Ö–æ–¥–∏—Ç–µ!')
    await bot.send_message(chat_id = message.from_user.id, text='https://t.me/bettercallpavlukov/1087', reply_markup=to_the_main_menu_keyboard)

# –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è

async def consultation_mobilization(message: types.Message):
    await AppealMobilization.appeal_mobilization1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_keyboard_in_abort)

async def consultation_mobilization_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealMobilization.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

async def consultation_mobilization_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_mobilization)
        else:
            await AppealMobilization.appeal_mobilization2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_mobilization)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await AppealMobilization.appeal_mobilization2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

# –ú–∏–≥—Ä–∞—Ü–∏—è

async def consultation_migration(message: types.Message):
    await AppealMigration.appeal_migration1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –º–µ–Ω—è –≤ –ø–æ–¥–∞—Ä–æ–∫ —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"', reply_markup=consultation_keyboard_in_abort)

async def consultation_migration_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ú–∏–≥—Ä–∞—Ü–∏—è'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealMigration.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

async def consultation_migration_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_message(chat_id = message.from_user.id, text='–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª, —Ä–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å –≤–∞–º —Å–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã" –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\nhttps://drive.google.com/file/d/1Y2rMo_GcgpF3ck2NzU0JPbQU2of3VQpT/view')
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_migration)
        else:
            await AppealMigration.appeal_migration2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –º–∏–≥—Ä–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_migration)
            await bot.send_message(chat_id = message.from_user.id, text='–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, —Ä–∞–¥ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å –≤–∞–º —Å–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç "–ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –†–æ—Å—Å–∏–∏: –¥–µ–Ω—å–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã" –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\nhttps://drive.google.com/file/d/1Y2rMo_GcgpF3ck2NzU0JPbQU2of3VQpT/view')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await AppealMigration.appeal_migration2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

# –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã

async def consultation_employment(message: types.Message):
    await AppealEmployment.appeal_employment1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_keyboard_in_abort)

async def consultation_employment_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealEmployment.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

async def consultation_employment_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_employment)
        else:
            await AppealEmployment.appeal_employment2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_employment)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await AppealEmployment.appeal_employment2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

# –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

async def consultation_consumer(message: types.Message):
    await AppealConsumer.appeal_consumer1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_keyboard_in_abort)

async def consultation_consumer_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealConsumer.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

async def consultation_consumer_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_consumer)
        else:
            await AppealConsumer.appeal_consumer2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=consultation_keyboard_in_consumer)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await AppealConsumer.appeal_consumer2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

# –î—Ä—É–≥–∞—è —Ç–µ–º–∞

async def consultation_another(message: types.Message):
    await AppealAnother.appeal_another1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å', reply_markup=consultation_keyboard_in_abort)

async def consultation_another_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–î—Ä—É–≥–∞—è —Ç–µ–º–∞'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealAnother.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

async def consultation_another_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    global reminder_state
    global aioschedule_task
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ç–µ–º–µ. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã:', reply_markup=consultation_keyboard_in_another)
        else:
            await AppealAnother.appeal_another2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ç–µ–º–µ. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã:', reply_markup=consultation_keyboard_in_another)
            aioschedule_task.cancel()
            reminder_state = 0
            await state.finish()
        else:
            await AppealAnother.appeal_another2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=consultation_keyboard_in_only_telegram)

# –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤

async def feedback(message: types.Message):
    await AppealFeedback.appeal_feedback1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π. –ú—ã –æ–ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±—É–¥—É —Ä–∞–¥ –≤–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', reply_markup=to_the_main_menu_keyboard)

async def feedback_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–û—Ç–∑—ã–≤—ã'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
        data['status'] = ''
        data['phone'] = ''
    await data_base.sql_add_appeal(state)
    admins_list = await data_base.sql_get_admin()
    for id in admins_list:
        await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–∑—ã–≤. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
    await bot.send_message(chat_id = message.from_user.id, text='–°–ø–∞—Å–∏–±–æ! –Ø —Ü–µ–Ω—é –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å', reply_markup=to_the_main_menu_keyboard)
    await state.finish()

# –ú–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

async def suggestion(message: types.Message):
    await AppealSuggestion.appeal_suggestion1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ —Ö—ç—à—Ç—ç–≥–∞–º–∏, –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ê –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–∫–∞-—á—Ç–æ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª–∏ —Å—Ñ–µ—Ä—É –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º', reply_markup=to_the_main_menu_keyboard)
    await bot.send_message(chat_id = message.from_user.id, text='https://t.me/bettercallpavlukov/1087')

async def suggestion_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
        data['status'] = ''
        data['phone'] = ''
    await data_base.sql_add_appeal(state)
    admins_list = await data_base.sql_get_admin()
    for id in admins_list:
        await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
    await bot.send_message(chat_id = message.from_user.id, text='–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ!', reply_markup=to_the_main_menu_keyboard)
    await state.finish()

# –ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

async def cooperation(message: types.Message):
    await AppealCooperation.appeal_cooperation1.set()
    await bot.send_message(chat_id = message.from_user.id, text='–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', reply_markup=to_the_main_menu_keyboard)

async def cooperation_add_appeal(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stage'] = 'üü¢–ù–æ–≤–æ–µ'
        data['user_id'] = message.chat.id
        if message.from_user.username == None:
            data['nickname'] = ''
        else:
            data['nickname'] = message.from_user.username
        data['fullname'] = message.from_user.full_name
        data['section'] = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'
        current_datetime = datetime.now()
        data['datetime'] = str(current_datetime)[0:-7]
        data['appeal'] = message.text
    await AppealCooperation.next()
    await bot.send_message(chat_id = message.from_user.id, text='–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=cooperation_keyboard_in_only_telegram)

async def cooperation_phone_processing(message: typing.Union[types.Contact, types.Message], state: FSMContext):
    if not message.text:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await state.finish()
            await bot.send_contact(chat_id = message.from_user.id, phone_number = '+79933393746', first_name = '–Ø—Ä–æ—Å–ª–∞–≤', last_name = '–ü–∞–≤–ª—é–∫–æ–≤')
            await bot.send_message(chat_id = message.from_user.id, text='–Ø —Ä–∞—Å—Å–º–æ—Ç—Ä—é –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Telegram, —á—Ç–æ–±—ã —è —Å–º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=to_the_main_menu_keyboard)
        else:
            await AppealCooperation.appeal_cooperation2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=cooperation_keyboard_in_only_telegram)
    else:
        async with state.proxy() as data:
            if not message.text:
                data['status'] = '–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ Telegram'
                data['phone'] = message.contact.phone_number
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            else:
                data['status'] = '–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ'
                data['phone'] = message.text
                phone_checked = await phone_checker(data['phone'])
                data['phone'] = await phone_checker(data['phone'])
            
        if phone_checked != 'fail':
            await data_base.sql_add_appeal(state)
            admins_list = await data_base.sql_get_admin()
            for id in admins_list:
                await bot.send_message(chat_id = int(id), text='–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            await bot.send_message(chat_id = message.from_user.id, text='–Ø —Ä–∞—Å—Å–º–æ—Ç—Ä—é –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ', reply_markup=to_the_main_menu_keyboard)
            await state.finish()
        else:
            await AppealCooperation.appeal_cooperation2.set()
            await bot.send_message(chat_id = message.from_user.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â—ë —Ä–∞–∑ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ', reply_markup=cooperation_keyboard_in_only_telegram)

# –û–±–æ –º–Ω–µ

async def about_me_start_command(message: types.Message):
    await bot.send_photo(chat_id=message.chat.id, photo=open('/home/lines14/projects/judicial_telegram_bot/documents/about_me.jpg', 'rb'))
    await bot.send_message(chat_id = message.from_user.id, text='–û–±–æ –º–Ω–µ:\n\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ú–ì–£ –∏–º. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ (2015) –∏ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –í–®–≠ (2017)\n\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ç—Ä—É–¥–æ–≤–æ–µ –∏ –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∏–∑–Ω–µ—Å–∞, –∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π, —Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã\n\n–û–ø—ã—Ç: 5 –ª–µ—Ç —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –±–æ–ª–µ–µ 120 –¥–µ–ª\n\n95% —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤\n\n–í–∑—ã—Å–∫–∞–ª –±–æ–ª–µ–µ 4 –º–ª–Ω —Ä—É–±–ª–µ–π –¥–ª—è –æ–±—Ä–∞—Ç–∏–≤—à–∏—Ö—Å—è –∫–æ –º–Ω–µ —Ñ–∏–∑–ª–∏—Ü\n–û—Ç–º–µ–Ω–∏–ª –±–æ–ª–µ–µ 15 –≤—ã–≥–æ–≤–æ—Ä–æ–≤\n–ü–æ–º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–µ—Å—è—Ç–∫–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–æ—ë–º —Å–∞–π—Ç–µ:\nhttp://yaroslaw.org')
    await bot.send_message(chat_id = message.from_user.id, text='–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', reply_markup=socials_inline_keyboard)

# async def about_me_telegram(message: types.Message):
#     await bot.send_message(chat_id = message.from_user.id, text='https://t.me/bettercallpavlukov', reply_markup=about_me_keyboard)

# async def about_me_instagram(message: types.Message):
#     await bot.send_message(chat_id = message.from_user.id, text='https://www.instagram.com/bettercallpavlukov/', reply_markup=about_me_keyboard)

# async def about_me_vk(message: types.Message):
#     await bot.send_message(chat_id = message.from_user.id, text='https://vk.com/yaroslaw_org', reply_markup=about_me_keyboard)

# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫

async def scheduler():
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def reminder():
    global reminder_id
    await bot.send_message(chat_id = reminder_id, text='–í—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º!')

# –ê–Ω—Ç–∏—Ñ–ª—É–¥

async def exception_handler(update: types.Update, exception: exceptions.RetryAfter):
    await bot.send_message(chat_id = update.message.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —è —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—á—É!\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –±—É–¥–Ω—è–º —Å 10:00 –¥–æ 20:00 (–ú–°–ö). –°–± –∏ –í—Å - –≤—ã—Ö–æ–¥–Ω—ã–µ.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã:', reply_markup=consultation_keyboard_in_another)
    return True

# –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:

# async def generator_start_command(message: types.Message):
#     await bot.send_message(chat_id = message.from_user.id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–¥–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å", –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–º–µ—Ä"', reply_markup=doc_generator_start_keyboard)

# async def get_example(message: types.Message):
#     await message.reply_document(open('/home/lines14/projects/judicial_telegram_bot/example/document_example.docx', 'rb'))

# async def add_data(message: types.Message):
#     await DocGenerator.doc_generator1.set()
#     await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:', reply_markup=cancel_generator_keyboard)

# async def cancel_handlers_pick_data(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.finish()
#     await message.reply('–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å"', reply_markup=doc_generator_start_keyboard)

# async def doc_generator1(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data1'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:')

# async def doc_generator2(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data2'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏—Å—Ç—Ü–∞:')

# async def doc_generator3(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data3'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏—Å—Ç—Ü–∞:')

# async def doc_generator4(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data4'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏—Å—Ç—Ü–∞ –¥–ª—è –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:')

# async def doc_generator5(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data5'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∏—Å—Ç—Ü–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:')

# async def doc_generator6(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data6'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∏—Å—Ç—Ü–∞:')

# async def doc_generator7(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data7'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç—á–∏–∫–∞:')

# async def doc_generator8(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data8'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–≤–µ—Ç—á–∏–∫–∞:')

# async def doc_generator9(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data9'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞:')

# async def doc_generator10(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data10'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–¥–∞—á–∏ –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:')

# async def doc_generator11(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data11'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:')

# async def doc_generator12(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data12'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è:')

# async def doc_generator13(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data13'] = message.text
#     await DocGenerator.next()
#     await bot.send_message(chat_id = message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –æ–±—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è:')

# async def doc_generator14(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['user_data14'] = message.text
#     await data_print(state)
#     await bot.send_message(chat_id = message.from_user.id, text='–£–∫–∞–∑–∞–Ω–Ω—ã–µ –í–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å", —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', reply_markup=doc_generator_finish_keyboard)
#     await state.finish()

# async def get_file(message: types.Message):
#     await message.reply_document(open('/home/lines14/projects/judicial_telegram_bot/documents/your_document.docx', 'rb'))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –±–æ—Ç–∞

def register_handler_client(dp: Dispatcher):

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ —Å–±–æ—Ä—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

    dp.register_message_handler(start_command, commands=['start'])
    dp.register_callback_query_handler(start_inline_keyboard_callback_pick, text='yes')
    dp.register_callback_query_handler(start_inline_keyboard_callback_redirect, text=['no', 'nope'])
    dp.register_message_handler(restart_command, text=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–°–ø–∞—Å–∏–±–æ, –±—É–¥—É –∂–¥–∞—Ç—å'])
    dp.register_callback_query_handler(restart_command_inline, text=['To main menu', 'Thank you'])
    dp.register_message_handler(recomendations_after, text=['–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É –º–æ–±–∏–ª–∏–∑–∞—Ü–∏–∏', '–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–∏', '–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤', '–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π', '–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å—Ç—ã'])
    dp.register_callback_query_handler(recomendations_after_inline, text=['Read mobilization', 'Read migration', 'Read employment', 'Read consumer', 'Read another'])
    dp.register_message_handler(restart_command_for_all_FSM, state='*', text=['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start'])
    dp.register_message_handler(consultation_start_command, text='–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
    # dp.register_message_handler(generator_start_command, text='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—É–¥–µ–±–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    dp.register_message_handler(about_me_start_command, text='–û–±–æ –º–Ω–µ')
    dp.register_message_handler(feedback, text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏–µ', state=None)
    dp.register_message_handler(feedback_add_appeal, state=AppealFeedback.appeal_feedback1)
    dp.register_message_handler(suggestion, text='–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', state=None)
    dp.register_message_handler(suggestion_add_appeal, state=AppealSuggestion.appeal_suggestion1)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å–æ —Å–±–æ—Ä—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

    #–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è

    dp.register_callback_query_handler(start_inline_keyboard_callback_mobilization, text='mobilization', state=None)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_without_delete_markup, state=InlineAppealMobilization.inline_appeal_mobilization1, text='missclick')
    dp.register_message_handler(start_inline_keyboard_callback_mobilization_add_appeal, state=InlineAppealMobilization.inline_appeal_mobilization1)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_delete_markup, state='*', text='missclick_markup')
    dp.register_message_handler(start_inline_keyboard_callback_mobilization_phone_processing, content_types=['contact', 'text'], state=InlineAppealMobilization.inline_appeal_mobilization2)

    # –ú–∏–≥—Ä–∞—Ü–∏—è

    dp.register_callback_query_handler(start_inline_keyboard_callback_migration, text='migration', state=None)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_without_delete_markup, state='*', text='missclick')
    dp.register_message_handler(start_inline_keyboard_callback_migration_add_appeal, state=InlineAppealMigration.inline_appeal_migration1)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_delete_markup, state='*', text='missclick_markup')
    dp.register_message_handler(start_inline_keyboard_callback_migration_phone_processing, content_types=['contact', 'text'], state=InlineAppealMigration.inline_appeal_migration2)

    # –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã

    dp.register_callback_query_handler(start_inline_keyboard_callback_employment, text='employment', state=None)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_without_delete_markup, state='*', text='missclick')
    dp.register_message_handler(start_inline_keyboard_callback_employment_add_appeal, state=InlineAppealEmployment.inline_appeal_employment1)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_delete_markup, state='*', text='missclick_markup')
    dp.register_message_handler(start_inline_keyboard_callback_employment_phone_processing, content_types=['contact', 'text'], state=InlineAppealEmployment.inline_appeal_employment2)

    # –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

    dp.register_callback_query_handler(start_inline_keyboard_callback_consumer, text='consumer', state=None)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_without_delete_markup, state='*', text='missclick')
    dp.register_message_handler(start_inline_keyboard_callback_consumer_add_appeal, state=InlineAppealConsumer.inline_appeal_consumer1)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_delete_markup, state='*', text='missclick_markup')
    dp.register_message_handler(start_inline_keyboard_callback_consumer_phone_processing, content_types=['contact', 'text'], state=InlineAppealConsumer.inline_appeal_consumer2)

    # –î—Ä—É–≥–∞—è —Ç–µ–º–∞

    dp.register_callback_query_handler(start_inline_keyboard_callback_another, text='another', state=None)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_without_delete_markup, state='*', text='missclick')
    dp.register_message_handler(start_inline_keyboard_callback_another_add_appeal, state=InlineAppealAnother.inline_appeal_another1)
    dp.register_callback_query_handler(restart_inline_keyboard_callback_pick_delete_markup, state='*', text='missclick_markup')
    dp.register_message_handler(start_inline_keyboard_callback_another_phone_processing, content_types=['contact', 'text'], state=InlineAppealAnother.inline_appeal_another2)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å–æ —Å–±–æ—Ä—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

    dp.register_message_handler(consultation_back_for_consultation_FSM, state='*', text='–ù–∞–∑–∞–¥')

    # –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è

    dp.register_message_handler(consultation_mobilization, text='–ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è', state=None)
    dp.register_message_handler(consultation_mobilization_add_appeal, state=AppealMobilization.appeal_mobilization1)
    dp.register_message_handler(consultation_mobilization_phone_processing, content_types=['contact', 'text'], state=AppealMobilization.appeal_mobilization2)

    # –ú–∏–≥—Ä–∞—Ü–∏—è

    dp.register_message_handler(consultation_migration, text='–ú–∏–≥—Ä–∞—Ü–∏—è', state=None)
    dp.register_message_handler(consultation_migration_add_appeal, state=AppealMigration.appeal_migration1)
    dp.register_message_handler(consultation_migration_phone_processing, content_types=['contact', 'text'], state=AppealMigration.appeal_migration2)

    # –¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã

    dp.register_message_handler(consultation_employment, text='–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã', state=None)
    dp.register_message_handler(consultation_employment_add_appeal, state=AppealEmployment.appeal_employment1)
    dp.register_message_handler(consultation_employment_phone_processing, content_types=['contact', 'text'], state=AppealEmployment.appeal_employment2)

    # –ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

    dp.register_message_handler(consultation_consumer, text='–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π', state=None)
    dp.register_message_handler(consultation_consumer_add_appeal, state=AppealConsumer.appeal_consumer1)
    dp.register_message_handler(consultation_consumer_phone_processing, content_types=['contact', 'text'], state=AppealConsumer.appeal_consumer2)

    # –î—Ä—É–≥–∞—è —Ç–µ–º–∞

    dp.register_message_handler(consultation_another, text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', state=None)
    dp.register_message_handler(consultation_another_add_appeal, state=AppealAnother.appeal_another1)
    dp.register_message_handler(consultation_another_phone_processing, content_types=['contact', 'text'], state=AppealAnother.appeal_another2)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–µ–Ω—é –æ–±–æ –º–Ω–µ

    # dp.register_message_handler(about_me_telegram, text='–ú–æ—è –≥—Ä—É–ø–ø–∞ –≤ Telegram')
    # dp.register_message_handler(about_me_instagram, text='–ú–æ–π Instagram')
    # dp.register_message_handler(about_me_vk, text='–ú–æ–π VK')

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

    dp.register_message_handler(cooperation, text='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', state=None)
    dp.register_message_handler(cooperation_add_appeal, state=AppealCooperation.appeal_cooperation1)
    dp.register_message_handler(cooperation_phone_processing, content_types=['contact', 'text'], state=AppealCooperation.appeal_cooperation2)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

    # dp.register_message_handler(get_example, text='–ü—Ä–∏–º–µ—Ä')
    # dp.register_message_handler(add_data, text='–°–æ–∑–¥–∞—Ç—å', state=None)
    # dp.register_message_handler(cancel_handlers_pick_data, state='*', text='–û—Ç–º–µ–Ω–∞')
    # dp.register_message_handler(doc_generator1, state=DocGenerator.doc_generator1)
    # dp.register_message_handler(doc_generator2, state=DocGenerator.doc_generator2)
    # dp.register_message_handler(doc_generator3, state=DocGenerator.doc_generator3)
    # dp.register_message_handler(doc_generator4, state=DocGenerator.doc_generator4)
    # dp.register_message_handler(doc_generator5, state=DocGenerator.doc_generator5)
    # dp.register_message_handler(doc_generator6, state=DocGenerator.doc_generator6)
    # dp.register_message_handler(doc_generator7, state=DocGenerator.doc_generator7)
    # dp.register_message_handler(doc_generator8, state=DocGenerator.doc_generator8)
    # dp.register_message_handler(doc_generator9, state=DocGenerator.doc_generator9)
    # dp.register_message_handler(doc_generator10, state=DocGenerator.doc_generator10)
    # dp.register_message_handler(doc_generator11, state=DocGenerator.doc_generator11)
    # dp.register_message_handler(doc_generator12, state=DocGenerator.doc_generator12)
    # dp.register_message_handler(doc_generator13, state=DocGenerator.doc_generator13)
    # dp.register_message_handler(doc_generator14, state=DocGenerator.doc_generator14)
    # dp.register_message_handler(get_file, text='–ü–æ–ª—É—á–∏—Ç—å')

    # –ê–Ω—Ç–∏—Ñ–ª—É–¥

    dp.register_errors_handler(exception_handler, exception=exceptions.RetryAfter)